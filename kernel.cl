#define xtime(x) ((x<<1) ^ (((x>>7) & 1) * 0x1b))
#define Multiply(x,y) (((y & 1) * x) ^ ((y>>1 & 1) * xtime(x)) ^ ((y>>2 & 1) * xtime(xtime(x))) ^ ((y>>3 & 1) * xtime(xtime(xtime(x)))) ^ ((y>>4 & 1) * xtime(xtime(xtime(xtime(x))))))
#define SAES_BLOCK_BYTES 16
#define ROW_COL_LEN 4
#define STATE_SIZE ROW_COL_LEN*ROW_COL_LEN

// The S-box used state AES Encription
__constant unsigned char s2Box[256] = {
	//0     1    2      3     4    5     6     7      8    9     A      B    C     D     E     F
	0x63, 0x7f, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, //0
	0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, //1
	0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, //2
	0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, //3
	0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, //4
	0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, //5
	0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, //6
	0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, //7
	0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, //8
	0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, //9
	0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, //A
	0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, //B
	0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, //C
	0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, //D
	0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, //E
	0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16  //F
};

// round key
__constant unsigned char rndKeys[240] = {
	0x6C, 0x6F, 0x6F, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x0E, 0x0C, 0x0C, 0x13, 0x0E, 0x0C, 0x0C, 0x13, 0x0E, 0x0C, 0x0C, 0x13, 0x0E, 0x0C, 0x0C, 0x13,
	0xF2, 0xF2, 0x71, 0xB8, 0xFC, 0xFE, 0x7D, 0xAB, 0xF2, 0xF2, 0x71, 0xB8, 0xFC, 0xFE, 0x7D, 0xAB,
	0x4D, 0x0D, 0x13, 0x08, 0xB1, 0xF3, 0x6E, 0xA3, 0x43, 0x01, 0x1F, 0x1B, 0xBF, 0xFF, 0x62, 0xB0,
	0x53, 0xA7, 0xF4, 0x00, 0xE2, 0x54, 0x9A, 0xA3, 0xA1, 0x55, 0x85, 0xB8, 0x1E, 0xAA, 0xE7, 0x08,
	0xEF, 0x33, 0xC4, 0x72, 0x0D, 0x67, 0x5E, 0xD1, 0xAC, 0x32, 0xDB, 0x69, 0xB2, 0x98, 0x3C, 0x61,
	0x89, 0xD8, 0x2B, 0x45, 0x84, 0xBF, 0x75, 0x94, 0x28, 0x8D, 0xAE, 0xFD, 0x9A, 0x15, 0x92, 0x9C,
	0x90, 0x97, 0xF5, 0xFD, 0x14, 0x28, 0x80, 0x69, 0x3C, 0xA5, 0x2E, 0x94, 0xA6, 0xB0, 0xBC, 0x08,
	0xF7, 0xF2, 0xC5, 0xD9, 0xE3, 0xDA, 0x45, 0xB0, 0xDF, 0x7F, 0x6B, 0x24, 0x79, 0xCF, 0xD7, 0x2C,
	0x66, 0xFC, 0xB4, 0x6F, 0x85, 0x26, 0xF1, 0xDF, 0x5A, 0x59, 0x9A, 0xFB, 0x23, 0x96, 0x4D, 0xD7,
	0xC0, 0x1F, 0xBA, 0x49, 0x45, 0x39, 0x4B, 0x96, 0x1F, 0x60, 0xD1, 0x6D, 0x3C, 0xF6, 0x9C, 0xBA,
	0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
	0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
	0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
	0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC
};

// The S-box used state AES Encription
__constant unsigned char cipher[240] = 
{
   0x00, 0x00, 0x03, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x03, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
   0x00, 0x00, 0x03, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
   0x00, 0x00, 0x03, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
   0x00, 0x00, 0x03, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,
   0x00, 0x00, 0x03, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05,
   0x00, 0x00, 0x03, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06,
   0x00, 0x00, 0x03, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07,
   0x00, 0x00, 0x03, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08,
   0x00, 0x00, 0x03, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09,
   0x00, 0x00, 0x03, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A,
   0x00, 0x00, 0x03, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B,
   0x00, 0x00, 0x03, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C,
   0x00, 0x00, 0x03, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0D,
   0x00, 0x00, 0x03, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E
};

/**
Shift rows in state to the left with different offsets where offset is row number.
*/
void shiftRows(__global unsigned char* ciphertext, __private const int globalIndex, __private int* stateMatrix)
{
	__private int row1 = 0;
	__private int row2 = ROW_COL_LEN * 1;
	__private int row3 = ROW_COL_LEN * 2;
	__private int row4 = ROW_COL_LEN * 3;
	__private unsigned char temp;

	// rotate first row 1 columns to left
	temp = stateMatrix[row2];
	stateMatrix[row2] = stateMatrix[row2 + 1];
	stateMatrix[row2 + 1] = stateMatrix[row2 + 2];
	stateMatrix[row2 + 2] = stateMatrix[row2 + 3];
	stateMatrix[row2 + 3] = temp;

	// rotate second row 2 columns to left
	temp = stateMatrix[row3];
	stateMatrix[row3] = stateMatrix[row3 + 2];   
	stateMatrix[row3 + 2] = temp;

	temp = stateMatrix[row3 + 1];
	stateMatrix[row3 + 1] = stateMatrix[row3 + 3];
	stateMatrix[row3 + 3] = temp;

	// rotate third row 3 columns to left
	temp = stateMatrix[row4] ;
	stateMatrix[row4] = stateMatrix[row4 + 3];
	stateMatrix[row4 + 3] = stateMatrix[row4 + 2];
	stateMatrix[row4 + 2] = stateMatrix[row4 + 1];
	stateMatrix[row4 + 1] = temp;

}

/**
Add round key to current state.

@param round (IN) Index of round key to be added.
*/
void addRoundKey(__global unsigned char* ciphertext, __global const unsigned char* roundKeys, __private const int roundNum, __private const int globalIndex, __private int* stateMatrix)
{
	__private int localIndex = get_local_id(0) + (get_local_size(1) * get_local_id(1));
	
	for(int i = 0; i < STATE_SIZE; i++){
		stateMatrix[i] ^= roundKeys[roundNum * ROW_COL_LEN * ROW_COL_LEN + i];	
	}
	//ciphertext[globalIndex] ^= roundKeys[roundNum * ROW_COL_LEN * ROW_COL_LEN + get_local_id(1) * ROW_COL_LEN + get_local_id(0)];
	//state[i][j] ^= roundKey[round * SAES_STATE_ROW_COL_SIZE * SAES_STATE_ROW_COL_SIZE + i * SAES_STATE_ROW_COL_SIZE + j];
}

/**
Mix columns of the current state.
*/
void mixColumns(__global unsigned char* ciphertext, __private const int globalIndex, __private int* stateMatrix)
{
	__private int row1 = 0;
	__private int row2 = ROW_COL_LEN * 1;
	__private int row3 = ROW_COL_LEN * 2;
	__private int row4 = ROW_COL_LEN * 3;
	__private unsigned char Tmp, Tm, t;
	
	// process all element's in columns
	for (__private int i = 0; i < ROW_COL_LEN; i++)
	{
		t = stateMatrix[row1 + i];
		Tmp = stateMatrix[row1 + i] ^ stateMatrix[row2 + i] ^ stateMatrix[row3 + i] ^ stateMatrix[row4 + i];

		Tm = stateMatrix[row1 + i] ^ stateMatrix[row2 + i];
		Tm = xtime(Tm);
		stateMatrix[row1 + i] ^= Tm ^ Tmp;

		Tm = stateMatrix[row2 + i] ^ stateMatrix[row3 + i];
		Tm = xtime(Tm);
		stateMatrix[row2 + i] ^= Tm ^ Tmp;

		Tm = stateMatrix[row3 + i] ^ stateMatrix[row4 + i];
		Tm = xtime(Tm);
		stateMatrix[row3 + i] ^= Tm ^ Tmp;
		
		Tm = stateMatrix[row4 + i] ^ t;
		Tm = xtime(Tm);
		stateMatrix[row4 + i] ^= Tm ^ Tmp;
	}

}

/**
Substitute bytes in current state with those at the same index in s-box.
*/
void subBytes(__global unsigned char* ciphertext, __global const unsigned char* sBox, __private const int globalIndex, __private int* stateMatrix, __private const int startIndex){

	for(int i = 0; i < 16; i++) {
		stateMatrix[i] = s2Box[stateMatrix[i]];
	}
	
}

/**
Encrypt 16-byte plaintext given sBox, roundkeys, and number of rounds.

@param plaintext (IN) A pointer to 16-bytes of plaintext.
@param ciphertext (OUT) A pointer to 16-bytes of encrypted plaintext.
@param sBox (IN) An AES substitution look-up table.
@param roundKeys (IN) A pointer to AES round keys.
@param numRounds (IN) Number of AES rounds, based on key size.
*/
__kernel void encrypt(__global unsigned char* ciphertext, __global const unsigned char* sBox, __global const unsigned char* roundKeys, __global const int* numRounds)
{
	__private int currentRound;

	__private int globalIndex = get_global_id(0);
	//__private int globalIndex = (get_local_id(0) + (get_local_id(1) * get_local_size(1))) + (get_group_id(0) * (get_local_size(0) * get_local_size(1))) + (get_group_id(1) * (get_local_size(0) * get_local_size(1) * get_num_groups(0)));
	//__private int globalIndex = (get_local_id(0) + (get_local_id(1) * get_local_size(1))) + (get_group_id(0) * STATE_SIZE);
	__private int startIndex = globalIndex * STATE_SIZE;
	__private int stateMatrix[STATE_SIZE];
	__private unsigned char oldVal;

	//--------------------------

	//for(int i = 0; i < STATE_SIZE; i++)
		//stateMatrix[i] = ciphertext[i + (globalIndex * STATE_SIZE)];


	//subBytes(ciphertext, globalIndex, stateMatrix, startIndex);
	//mixColumns(ciphertext, globalIndex, stateMatrix);
	//addRoundKey(ciphertext, roundKeys, 0, globalIndex, stateMatrix);
	//shiftRows(ciphertext, globalIndex, stateMatrix);

	//for(int i = 0; i < STATE_SIZE; i++)
		//ciphertext[i + (globalIndex * STATE_SIZE)] = stateMatrix[i];

	//--------------------------

	for(int i = 0; i < STATE_SIZE; i++)
		stateMatrix[i] = cipher[i + (globalIndex * STATE_SIZE)];

	// Initial addition of round key
	addRoundKey(ciphertext, roundKeys, 0, globalIndex, stateMatrix);

	// Process all rounds except last
	for (currentRound = 1; currentRound < 10; currentRound++)
	{
		subBytes(ciphertext, sBox, globalIndex, stateMatrix, startIndex);
		shiftRows(ciphertext, globalIndex, stateMatrix);
		mixColumns(ciphertext, globalIndex, stateMatrix);
		addRoundKey(ciphertext, roundKeys, currentRound, globalIndex, stateMatrix);
	}

	// Process last round
	subBytes(ciphertext, sBox, globalIndex, stateMatrix, startIndex);
	shiftRows(ciphertext, globalIndex, stateMatrix);
	addRoundKey(ciphertext, roundKeys, currentRound, globalIndex, stateMatrix);
	
	for(int i = 0; i < STATE_SIZE; i++)
		ciphertext[i + (globalIndex * STATE_SIZE)] = stateMatrix[i];

}